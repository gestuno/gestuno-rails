<script>
  'use strict';

  const vars = JSON.parse(document.querySelector('#vars').dataset.vars);
  // window.vars = vars; //TODO: remove global

  const timer = document.querySelector('#timer');

  const Video = Twilio.Video;

  let activeRoom;
  let previewTracks;
  let identity;

  const startCallTimer = () => {

    const startTime = new Date();

    setInterval(() => {
      const duration = moment.duration(new Date() - startTime);

      const units = [duration.minutes(), duration.seconds()];

      if (duration.hours()) units.unshift(Math.floor(duration.asHours()));

      const timeDisplay = units.map(unit => unit.toString(10).padStart(2, '0')).join(':');

      timer.textContent = timeDisplay;
    }, 100); //sub-second to ensure reasonable accuracy accounting for lag over time
  }

  // Attach the Tracks to the DOM.
  function attachTracks(tracks, container) {
    tracks.forEach(function(track) {
      container.appendChild(track.attach());
    });
  }

  // Attach the Participant's Tracks to the DOM.
  function attachParticipantTracks(participant, container) {
    const tracks = Array.from(participant.tracks.values());
    attachTracks(tracks, container);
  }

  // Detach the Tracks from the DOM.
  function detachTracks(tracks) {
    tracks.forEach(function(track) {
      track.detach().forEach(function(detachedElement) {
        detachedElement.remove();
      });
    });
  }

  // Detach the Participant's Tracks from the DOM.
  function detachParticipantTracks(participant) {
    const tracks = Array.from(participant.tracks.values());
    detachTracks(tracks);
  }

  // When we are about to transition away from this page, disconnect
  // from the room, if joined.
  window.addEventListener('beforeunload', leaveRoomIfJoined);

  // Obtain a token from the server in order to connect to the Room.
  $.getJSON('/api/v1/twiliojwt', function(data) {
    identity = data.identity;
    // document.getElementById('room-controls').style.display = 'block';

    // joinRoom();

    // Bind button to join Room.
    // document.getElementById('button-join').onclick = joinRoom;

    joinRoom();

    function joinRoom() {
      const roomName = vars.roomName;

      log("Joining room '" + roomName + "'...");
      const connectOptions = {
        name: roomName,
        logLevel: 'debug'
      };

      if (previewTracks) {
        connectOptions.tracks = previewTracks;
      }

      // Join the Room with the token from the server and the
      // LocalParticipant's Tracks.
      Video.connect(data.token, connectOptions).then(roomJoined, function(error) {
        log('Could not connect to Twilio: ' + error.message);
      });
    }

    // window.joinRoom = joinRoom; //TODO: remove from `window`

    // Bind button to leave Room.
    document.getElementById('button-end-call').onclick = function() {
      log('Leaving room...');
      activeRoom.disconnect();
    };
  });

  function endCall() {
    if (vars.currentUserIsInterpreter) {
      fetch('/charge', {method: 'POST'})
      .then(res => {
        window.location.pathname = 'endcall';
      });
    } else {
      window.location.pathname = 'endcall';
    }
  }

  // Successfully connected!
  function roomJoined(room) {
    window.room = activeRoom = room;

    log("Joined as '" + identity + "'");

    startCallTimer();

    // document.getElementById('button-join').style.display = 'none';
    // document.getElementById('button-leave').style.display = 'inline';

    // Attach LocalParticipant's Tracks, if not already attached.
    let previewContainer = document.getElementById('local-media');
    if (!previewContainer.querySelector('video')) {
      attachParticipantTracks(room.localParticipant, previewContainer);
    }

    // Attach the Tracks of the Room's Participants.
    room.participants.forEach(function(participant) {
      log("Already in Room: '" + participant.identity + "'");
      previewContainer = document.getElementById('remote-media');
      attachParticipantTracks(participant, previewContainer);
    });

    // When a Participant joins the Room, log the event.
    room.on('participantConnected', function(participant) {
      log("Joining: '" + participant.identity + "'");
    });

    // When a Participant adds a Track, attach it to the DOM.
    room.on('trackAdded', function(track, participant) {
      log(participant.identity + " added track: " + track.kind);
      previewContainer = document.getElementById('remote-media');
      attachTracks([track], previewContainer);
    });

    // When a Participant removes a Track, detach it from the DOM.
    room.on('trackRemoved', function(track, participant) {
      log(participant.identity + " removed track: " + track.kind);
      detachTracks([track]);
    });

    // When a Participant leaves the Room, detach its Tracks.
    room.on('participantDisconnected', function(participant) {
      log("Participant '" + participant.identity + "' left the room");
      detachParticipantTracks(participant);

      endCall();

    });

    // Once the LocalParticipant leaves the room, detach the Tracks
    // of all Participants, including that of the LocalParticipant.
    room.on('disconnected', function() {
      log('Left');
      if (previewTracks) {
        previewTracks.forEach(function(track) {
          track.stop();
        });
        previewTracks = null;
      }
      detachParticipantTracks(room.localParticipant);
      room.participants.forEach(detachParticipantTracks);
      activeRoom = null;
      // document.getElementById('button-join').style.display = 'inline';
      // document.getElementById('button-leave').style.display = 'none';

      endCall();

    });
  }

  // Preview LocalParticipant's Tracks.
  // document.getElementById('button-preview').onclick = function() {
  //   const localTracksPromise = previewTracks
  //     ? Promise.resolve(previewTracks)
  //     : Video.createLocalTracks();

  //   localTracksPromise.then(function(tracks) {
  //     window.previewTracks = previewTracks = tracks;
  //     const previewContainer = document.getElementById('local-media');
  //     if (!previewContainer.querySelector('video')) {
  //       attachTracks(tracks, previewContainer);
  //     }
  //   }, function(error) {
  //     console.error('Unable to access local media', error);
  //     log('Unable to access Camera and Microphone');
  //   });
  // };

  // Activity log.
  function log(message) {
    // const logDiv = document.getElementById('log');
    // logDiv.innerHTML += '<p>&gt;&nbsp;' + message + '</p>';
    // logDiv.scrollTop = logDiv.scrollHeight;
    console.log(`%ctwilio-logger: %c${message}`, 'color: gray', 'color: blue');
  }

  // Leave Room.
  function leaveRoomIfJoined() {
    if (activeRoom) {
      activeRoom.disconnect();
    }
  }
</script>
